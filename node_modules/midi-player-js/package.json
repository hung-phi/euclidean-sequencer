{
  "_from": "midi-player-js",
  "_id": "midi-player-js@2.0.5",
  "_inBundle": false,
  "_integrity": "sha512-1HrjWzlb6h9Jf0y62WXlBwZE4sq52h7DRNk5yRr0yhUShCnvyavCAogEqzbxuFGweEPaXrBz1G4uEIs/O71Xkg==",
  "_location": "/midi-player-js",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "midi-player-js",
    "fetchSpec": "latest",
    "name": "midi-player-js",
    "raw": "midi-player-js",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/midi-player-js/-/midi-player-js-2.0.5.tgz",
  "_shasum": "9e30738ffefd81febeb14b0437b0aec4b0231a1e",
  "_shrinkwrap": null,
  "_spec": "midi-player-js",
  "_where": "/Users/Phi/Earlham/CS345/project1",
  "author": {
    "name": "Garrett Grimm"
  },
  "babel": {
    "presets": [
      "es2015"
    ],
    "sourceMaps": "inline"
  },
  "browser": "browser/midiplayer.js",
  "bugs": {
    "url": "https://github.com/grimmdude/MidiPlayerJS/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Midi parser & player engine for browser or Node. Works well with single or multitrack MIDI files.",
  "devDependencies": {
    "babel-cli": "^6.14.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-es2015": "^6.14.0",
    "babelify": "^8.0.0",
    "browserify": "^14.5.0",
    "gulp": "^3.9.1",
    "gulp-babel": "^7.0.0",
    "gulp-concat": "^2.6.1",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^2.6.3",
    "gulp-uglify": "^3.0.0",
    "gulp-util": "^3.0.8",
    "jsdoc": "^3.4.3",
    "minami": "^1.1.1",
    "mocha": "~2.4.5",
    "sinon": "^7.1.1",
    "uglify-js": "^2.7.3",
    "vinyl-buffer": "^1.0.1",
    "vinyl-source-stream": "^1.1.2",
    "watch": "^1.0.2"
  },
  "directories": {
    "test": "test"
  },
  "homepage": "https://github.com/grimmdude/MidiPlayerJS#readme",
  "keywords": [
    "midi",
    "parser",
    "player"
  ],
  "license": "MIT",
  "main": "module/midiplayer.js",
  "name": "midi-player-js",
  "optionalDependencies": {},
  "readme": "# &#9836; MidiPlayerJS\n[![npm version](https://badge.fury.io/js/midi-player-js.svg)](https://badge.fury.io/js/midi-player-js)\n[![Build Status](https://travis-ci.org/grimmdude/MidiPlayerJS.svg?branch=master)](https://travis-ci.org/grimmdude/MidiPlayerJS)\n\nMidiPlayerJS is a JavaScript library which reads standard MIDI files and emits JSON events in real time.  This player does not generate any audio, but by attaching a handler to the event emitter you can trigger any code you like which could play audio, control visualizations, feed into a MIDI interface, etc.\n\n## Demos\n* [Neopixel Music](https://github.com/robertvorthman/neopixel-music) by robertvorthman @robertvorthman\n* [Autocomposer](http://www.rj-salvador.com/apps/autocomposer/) by RJ Salvador @rjsalvadorr\n* [Simple Browser Player](http://grimmdude.com/MidiPlayerJS/) by Garrett Grimm @grimmdude\n\n## Getting Started\nUsing MidiWriterJS is pretty simple.  Create a new player by instantiating `MidiPlayer.Player` with an event handler to be called for every MIDI event.  Then you can load and play a MIDI file.\n\n```js\nvar MidiPlayer = require('midi-player-js');\n\n// Initialize player and register event handler\nvar Player = new MidiPlayer.Player(function(event) {\n\tconsole.log(event);\n});\n\n// Load a MIDI file\nPlayer.loadFile('./test.mid');\nPlayer.play();\n```\n## Player Events\nThere are a handful of events on the `Player` object which you can subscribe to using the `Player.on()` method.  Some events pass data as the first argument of the callback as described below:\n\n```js\nPlayer.on('fileLoaded', function() {\n    // Do something when file is loaded\n});\nPlayer.on('playing', function(currentTick) {\n    // Do something while player is playing\n    // (this is repeatedly triggered within the play loop)\n});\nPlayer.on('midiEvent', function(event) {\n    // Do something when a MIDI event is fired.\n    // (this is the same as passing a function to MidiPlayer.Player() when instantiating.\n});\nPlayer.on('endOfFile', function() {\n    // Do something when end of the file has been reached.\n});\n```\n\nNote that because of a common practice called \"running status\" many MIDI files may use `Note on` events with `0` velocity in place of `Note off` events.\n\n## Full API Documentation\n[http://grimmdude.com/MidiPlayerJS/docs/](http://grimmdude.com/MidiPlayerJS/docs/)\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/grimmdude/MidiPlayerJS.git"
  },
  "scripts": {
    "build": "gulp",
    "docs": "jsdoc src README.md -d ./docs -t ./node_modules/minami",
    "pretest": "npm run build",
    "test": "mocha",
    "watch": "watch 'gulp' src"
  },
  "version": "2.0.5"
}
